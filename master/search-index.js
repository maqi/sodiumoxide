var searchIndex = {};
searchIndex['maidsafe_sodiumoxide'] = {"items":[[0,"","maidsafe_sodiumoxide","Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).",null,null],[5,"init","","`init()` initializes the sodium library and chooses faster versions of\nthe primitives if possible. `init()` also makes the random number generation\nfunctions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)\nthread-safe",null,{"inputs":[],"output":{"name":"bool"}}],[0,"randombytes","","Cryptographic random number generation.",null,null],[5,"randombytes","maidsafe_sodiumoxide::randombytes","`randombytes()` randomly generates size bytes of data.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"randombytes_into","","`randombytes_into()` fills a buffer `buf` with random data.",null,null],[0,"crypto","maidsafe_sodiumoxide","Cryptographic functions",null,null],[0,"box_","maidsafe_sodiumoxide::crypto","Public-key authenticated encryption",null,null],[0,"curve25519xsalsa20poly1305","maidsafe_sodiumoxide::crypto::box_","`crypto_box_curve25519xsalsa20poly1305` , a particular\ncombination of Curve25519, Salsa20, and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"PublicKey","maidsafe_sodiumoxide::crypto::box_::curve25519xsalsa20poly1305","`PublicKey` for asymmetric authenticated encryption",null,null],[3,"SecretKey","","`SecretKey` for asymmetric authenticated encryption",null,null],[3,"Nonce","","`Nonce` for asymmetric authenticated encryption",null,null],[3,"PrecomputedKey","","Applications that send several messages to the same receiver can gain speed by\nsplitting `seal()` into two steps, `precompute()` and `seal_precomputed()`.\nSimilarly, applications that receive several messages from the same sender can gain\nspeed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`.",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public key.",null,null],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,\nthe receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,\nthe senders public key `pk`, and a nonce `n`. It returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open()` returns `None`.",null,null],[5,"precompute","","`precompute()` computes an intermediate key that can be used by `seal_precomputed()`\nand `open_precomputed()`",null,{"inputs":[{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"precomputedkey"}}],[5,"seal_precomputed","","`seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,\nand a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open_precomputed","","`open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed\nkey `k` and a nonce `n`. It returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open_precomputed()` returns `None`.",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[17,"PRECOMPUTEDKEYBYTES","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",0,null],[11,"eq","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"publickey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",1,null],[11,"eq","","",1,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"secretkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",2,null],[11,"eq","","",2,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"precomputedkey"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"precomputedkey"}],"output":{"name":"precomputedkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",3,null],[11,"eq","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"precomputedkey"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"precomputedkey"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sign","maidsafe_sodiumoxide::crypto","Public-key signatures",null,null],[0,"ed25519","maidsafe_sodiumoxide::crypto::sign","`ed25519`, a signature scheme specified in\n[Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the\nstandard notion of unforgeability for a public-key signature scheme under\nchosen-message attacks.",null,null],[3,"Seed","maidsafe_sodiumoxide::crypto::sign::ed25519","`Seed` that can be used for keypair generation",null,null],[3,"SecretKey","","`SecretKey` for signatures",null,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[3,"Signature","","Detached signature",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"keypair_from_seed","","`keypair_from_seed()` computes a secret key and a corresponding public key\nfrom a `Seed`.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer's secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer's public key `pk`.\n`verify()` returns the message `Some(m)`.\nIf the signature fails verification, `verify()` returns `None`.",null,null],[5,"sign_detached","","`sign_detached()` signs a message `m` using the signer's secret key `sk`.\n`sign_detached()` returns the resulting signature `sig`.",null,null],[5,"verify_detached","","`verify_detached()` verifies the signature in `sig` against the message `m`\nand the signer's public key `pk`.\n`verify_detached()` returns true if the signature is valid, false otherwise.",null,null],[17,"SEEDBYTES","","",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SIGNATUREBYTES","","",null,null],[11,"drop","","",4,{"inputs":[{"name":"seed"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",4,null],[11,"eq","","",4,{"inputs":[{"name":"seed"},{"name":"seed"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"seed"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"seed"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"seed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",5,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",5,null],[11,"eq","","",5,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"secretkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",6,null],[11,"eq","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"publickey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",7,null],[11,"eq","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"signature"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"signature"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"signature"},{"name":"signature"}],"output":{"name":"ordering"}}],[11,"hash","","",7,{"inputs":[{"name":"signature"},{"name":"h"}],"output":null}],[0,"edwards25519sha512batch","maidsafe_sodiumoxide::crypto::sign","WARNING: This signature software is a prototype. It has been replaced by the final system\n[Ed25519](http://ed25519.cr.yp.to/). It is only kept here for compatibility reasons.",null,null],[3,"SecretKey","maidsafe_sodiumoxide::crypto::sign::edwards25519sha512batch","`SecretKey` for signatures",null,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer's secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer's public key `pk`.\n`verify()` returns the message `Some(m)`.\nIf the signature fails verification, `verify()` returns `None`.",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SIGNATUREBYTES","","",null,null],[11,"drop","","",8,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",8,null],[11,"eq","","",8,{"inputs":[{"name":"secretkey"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"secretkey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"secretkey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"secretkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",9,null],[11,"eq","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"publickey"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"publickey"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"publickey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"publickey"},{"name":"publickey"}],"output":{"name":"ordering"}}],[11,"hash","","",9,{"inputs":[{"name":"publickey"},{"name":"h"}],"output":null}],[0,"scalarmult","maidsafe_sodiumoxide::crypto","Scalar multiplication",null,null],[0,"curve25519","maidsafe_sodiumoxide::crypto::scalarmult","`crypto_scalarmult_curve25519` specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.\nThis function is conjectured to be strong. For background see Bernstein,\n\"Curve25519: new Diffie-Hellman speed records,\" Lecture Notes in Computer\nScience 3958 (2006), 207–228, http://cr.yp.to/papers.html#curve25519.",null,null],[3,"Scalar","maidsafe_sodiumoxide::crypto::scalarmult::curve25519","`Scalar` value (integer in byte representation)",null,null],[3,"GroupElement","","`GroupElement`",null,null],[5,"scalarmult","","`scalarmult()` multiplies a group element `p`\nby an integer `n`. It returns the resulting group element\n`q`.",null,{"inputs":[{"name":"scalar"},{"name":"groupelement"}],"output":{"name":"groupelement"}}],[5,"scalarmult_base","","`scalarmult_base()` computes the scalar product of a standard\ngroup element and an integer `n`. It returns the resulting\ngroup element `q`/",null,{"inputs":[{"name":"scalar"}],"output":{"name":"groupelement"}}],[17,"BYTES","","",null,null],[17,"SCALARBYTES","","",null,null],[11,"drop","","",10,{"inputs":[{"name":"scalar"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",10,null],[11,"eq","","",10,{"inputs":[{"name":"scalar"},{"name":"scalar"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"scalar"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"scalar"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"scalar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"groupelement"}],"output":{"name":"groupelement"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",11,null],[11,"eq","","",11,{"inputs":[{"name":"groupelement"},{"name":"groupelement"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"groupelement"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"groupelement"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"groupelement"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"auth","maidsafe_sodiumoxide::crypto","Secret-key authentication",null,null],[0,"hmacsha512","maidsafe_sodiumoxide::crypto::auth","`HMAC-SHA-512` `HMAC-SHA-512` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::auth::hmacsha512","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",12,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",12,null],[11,"eq","","",12,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",12,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",13,null],[11,"eq","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",13,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"tag"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[0,"hmacsha512256","maidsafe_sodiumoxide::crypto::auth","`HMAC-SHA-512-256`, i.e., the first 256 bits of\n`HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion\nof unforgeability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::auth::hmacsha512256","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",14,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",14,null],[11,"eq","","",14,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",15,null],[11,"eq","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"tag"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",15,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[0,"hmacsha256","maidsafe_sodiumoxide::crypto::auth","`HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::auth::hmacsha256","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",16,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",16,null],[11,"eq","","",16,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",17,null],[11,"eq","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"tag"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",17,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[0,"hash","maidsafe_sodiumoxide::crypto","Hashing",null,null],[0,"sha512","maidsafe_sodiumoxide::crypto::hash","`SHA-512`.",null,null],[3,"Digest","maidsafe_sodiumoxide::crypto::hash::sha512","Digest-structure",null,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"BLOCKBYTES","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",18,null],[11,"eq","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"digest"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,null],[11,"partial_cmp","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",18,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[0,"sha256","maidsafe_sodiumoxide::crypto::hash","`SHA-256`.",null,null],[3,"Digest","maidsafe_sodiumoxide::crypto::hash::sha256","Digest-structure",null,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"BLOCKBYTES","","",null,null],[11,"clone","","",19,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",19,null],[11,"eq","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"digest"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[0,"secretbox","maidsafe_sodiumoxide::crypto","Secret-key authenticated encryption",null,null],[0,"xsalsa20poly1305","maidsafe_sodiumoxide::crypto::secretbox","`crypto_secretbox_xsalsa20poly1305`, a particular\ncombination of Salsa20 and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::secretbox::xsalsa20poly1305","`Key` for symmetric authenticated encryption",null,null],[3,"Nonce","","`Nonce` for symmetric authenticated encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a secret key",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using a secret key `k` and a\nnonce `n`.  It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.\nIt returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open()` returns `None`.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",20,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",20,null],[11,"eq","","",20,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",21,null],[11,"eq","","",21,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"onetimeauth","maidsafe_sodiumoxide::crypto","Secret-key One-time authentication",null,null],[0,"poly1305","maidsafe_sodiumoxide::crypto::onetimeauth","`crypto_onetimeauth_poly1305`, an authenticator specified\nin [Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 9. This\nauthenticator is proven to meet the standard notion of unforgeability after a\nsingle message.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::onetimeauth::poly1305","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",22,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",22,null],[11,"eq","","",22,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",23,null],[11,"eq","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"tag"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"tag"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,null],[11,"partial_cmp","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"ordering"}}],[11,"hash","","",23,{"inputs":[{"name":"tag"},{"name":"h"}],"output":null}],[0,"pwhash","maidsafe_sodiumoxide::crypto","Password Hashing",null,null],[0,"scryptsalsa208sha256","maidsafe_sodiumoxide::crypto::pwhash","`crypto_pwhash_scryptsalsa208sha256`, a particular combination of Scrypt, Salsa20/8\nand SHA-256",null,null],[3,"OpsLimit","maidsafe_sodiumoxide::crypto::pwhash::scryptsalsa208sha256","`OpsLimit` represents the maximum number of computations to perform when\nusing the functions in this module.",null,null],[3,"MemLimit","","`MemLimit` represents the maximum amount of RAM that the functions in this\nmodule will use, in bytes.",null,null],[3,"Salt","","`Salt` used for password hashing",null,null],[3,"HashedPassword","","`HashedPassword`is a password verifier generated from a password",null,null],[5,"gen_salt","","`gen_salt()` randombly generates a new `Salt` for key derivation",null,{"inputs":[],"output":{"name":"salt"}}],[5,"derive_key","","The `derive_key()` function derives a key from a password and a `Salt`",null,null],[5,"pwhash","","The `pwhash()` returns a `HashedPassword` which\nincludes:",null,null],[5,"pwhash_verify","","`pwhash_verify()` verifies that the password `str_` is a valid password\nverification string (as generated by `pwhash()`) for `passwd`",null,null],[17,"SALTBYTES","","",null,null],[17,"STRBYTES","","",null,null],[17,"STRPREFIX","","",null,null],[17,"OPSLIMIT_INTERACTIVE","","",null,null],[17,"MEMLIMIT_INTERACTIVE","","",null,null],[17,"OPSLIMIT_SENSITIVE","","",null,null],[17,"MEMLIMIT_SENSITIVE","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"opslimit"}],"output":{"name":"opslimit"}}],[11,"clone","","",25,{"inputs":[{"name":"memlimit"}],"output":{"name":"memlimit"}}],[11,"clone","","",26,{"inputs":[{"name":"salt"}],"output":{"name":"salt"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",26,null],[11,"eq","","",26,{"inputs":[{"name":"salt"},{"name":"salt"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"salt"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"salt"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"salt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"hashedpassword"}],"output":{"name":"hashedpassword"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",27,null],[11,"eq","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,null],[11,"partial_cmp","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"hashedpassword"}],"output":{"name":"ordering"}}],[11,"hash","","",27,{"inputs":[{"name":"hashedpassword"},{"name":"h"}],"output":null}],[0,"stream","maidsafe_sodiumoxide::crypto","Secret-key encryption",null,null],[0,"xsalsa20","maidsafe_sodiumoxide::crypto::stream","`crypto_stream_xsalsa20`, a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::stream::xsalsa20","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",28,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",28,null],[11,"eq","","",28,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",29,null],[11,"eq","","",29,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"aes128ctr","maidsafe_sodiumoxide::crypto::stream","`AES 128` in `CTR`-mode\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::stream::aes128ctr","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",30,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",30,null],[11,"eq","","",30,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",31,null],[11,"eq","","",31,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"salsa208","maidsafe_sodiumoxide::crypto::stream","`crypto_stream_salsa208` (Salsa20/8), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::stream::salsa208","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",32,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",32,null],[11,"eq","","",32,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",33,null],[11,"eq","","",33,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"salsa2012","maidsafe_sodiumoxide::crypto::stream","`crypto_stream_salsa2012` (Salsa20/12), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::stream::salsa2012","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",34,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",34,null],[11,"eq","","",34,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",34,null],[6,"Output","","",null,null],[11,"index","","",34,null],[6,"Output","","",null,null],[11,"index","","",34,null],[6,"Output","","",null,null],[11,"index","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",35,null],[11,"eq","","",35,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",35,null],[6,"Output","","",null,null],[11,"index","","",35,null],[6,"Output","","",null,null],[11,"index","","",35,null],[6,"Output","","",null,null],[11,"index","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"salsa20","maidsafe_sodiumoxide::crypto::stream","`crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","maidsafe_sodiumoxide::crypto::stream::salsa20","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",36,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",36,null],[11,"eq","","",36,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",36,null],[6,"Output","","",null,null],[11,"index","","",36,null],[6,"Output","","",null,null],[11,"index","","",36,null],[6,"Output","","",null,null],[11,"index","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",37,null],[11,"eq","","",37,{"inputs":[{"name":"nonce"},{"name":"nonce"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"nonce"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"nonce"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",37,null],[6,"Output","","",null,null],[11,"index","","",37,null],[6,"Output","","",null,null],[11,"index","","",37,null],[6,"Output","","",null,null],[11,"index","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"nonce"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"shorthash","maidsafe_sodiumoxide::crypto","A lot of applications and programming language implementations have been\nrecently found to be vulnerable to denial-of-service attacks when a hash\nfunction with weak security guarantees, like Murmurhash 3, was used to\nconstruct a hash table.",null,null],[0,"siphash24","maidsafe_sodiumoxide::crypto::shorthash","`SipHash-2-4`",null,null],[3,"Digest","maidsafe_sodiumoxide::crypto::shorthash::siphash24","Digest-structure",null,null],[3,"Key","","Key",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for shorthash",null,{"inputs":[],"output":{"name":"key"}}],[5,"shorthash","","`shorthash` hashes a message `m` under a key `k`. It\nreturns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"KEYBYTES","","",null,null],[11,"clone","","",38,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",38,null],[11,"eq","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"digest"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"digest"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",38,null],[6,"Output","","",null,null],[11,"index","","",38,null],[6,"Output","","",null,null],[11,"index","","",38,null],[6,"Output","","",null,null],[11,"index","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"digest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",38,null],[11,"partial_cmp","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"bool"}}],[11,"cmp","","",38,{"inputs":[{"name":"digest"},{"name":"digest"}],"output":{"name":"ordering"}}],[11,"hash","","",38,{"inputs":[{"name":"digest"},{"name":"h"}],"output":null}],[11,"drop","","",39,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",39,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",39,null],[11,"eq","","",39,{"inputs":[{"name":"key"},{"name":"key"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"key"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"key"},{"name":"d"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",39,null],[6,"Output","","",null,null],[11,"index","","",39,null],[6,"Output","","",null,null],[11,"index","","",39,null],[6,"Output","","",null,null],[11,"index","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"key"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"verify","maidsafe_sodiumoxide::crypto","Constant-time comparison of fixed-size vecs",null,null],[5,"verify_16","maidsafe_sodiumoxide::crypto::verify","`verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the\nsame as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.",null,null],[5,"verify_32","","`verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the\nsame as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.",null,null]],"paths":[[3,"PublicKey"],[3,"SecretKey"],[3,"Nonce"],[3,"PrecomputedKey"],[3,"Seed"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"SecretKey"],[3,"PublicKey"],[3,"Scalar"],[3,"GroupElement"],[3,"Key"],[3,"Tag"],[3,"Key"],[3,"Tag"],[3,"Key"],[3,"Tag"],[3,"Digest"],[3,"Digest"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Tag"],[3,"OpsLimit"],[3,"MemLimit"],[3,"Salt"],[3,"HashedPassword"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Digest"],[3,"Key"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['libsodium_sys'] = {"items":[[0,"","libsodium_sys","",null,null],[3,"crypto_auth_hmacsha256_state","","",null,null],[3,"crypto_auth_hmacsha512_state","","",null,null],[3,"crypto_hash_sha256_state","","",null,null],[3,"crypto_hash_sha512_state","","",null,null],[5,"sodium_init","","",null,null],[5,"crypto_aead_chacha20poly1305_keybytes","","",null,null],[5,"crypto_aead_chacha20poly1305_nsecbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_npubbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_abytes","","",null,null],[5,"crypto_aead_chacha20poly1305_encrypt","","",null,null],[5,"crypto_aead_chacha20poly1305_decrypt","","",null,null],[5,"crypto_auth_bytes","","",null,null],[5,"crypto_auth_keybytes","","",null,null],[5,"crypto_auth_primitive","","",null,null],[5,"crypto_auth","","",null,null],[5,"crypto_auth_verify","","",null,null],[5,"crypto_auth_hmacsha256_bytes","","",null,null],[5,"crypto_auth_hmacsha256_keybytes","","",null,null],[5,"crypto_auth_hmacsha256","","",null,null],[5,"crypto_auth_hmacsha256_verify","","",null,null],[5,"crypto_auth_hmacsha256_init","","",null,null],[5,"crypto_auth_hmacsha256_update","","",null,null],[5,"crypto_auth_hmacsha256_final","","",null,null],[5,"crypto_auth_hmacsha512_bytes","","",null,null],[5,"crypto_auth_hmacsha512_keybytes","","",null,null],[5,"crypto_auth_hmacsha512","","",null,null],[5,"crypto_auth_hmacsha512_verify","","",null,null],[5,"crypto_auth_hmacsha512_init","","",null,null],[5,"crypto_auth_hmacsha512_update","","",null,null],[5,"crypto_auth_hmacsha512_final","","",null,null],[5,"crypto_auth_hmacsha512256_bytes","","",null,null],[5,"crypto_auth_hmacsha512256_keybytes","","",null,null],[5,"crypto_auth_hmacsha512256","","",null,null],[5,"crypto_auth_hmacsha512256_verify","","",null,null],[5,"crypto_auth_hmacsha512256_init","","",null,null],[5,"crypto_auth_hmacsha512256_update","","",null,null],[5,"crypto_auth_hmacsha512256_final","","",null,null],[5,"crypto_box_seedbytes","","",null,null],[5,"crypto_box_publickeybytes","","",null,null],[5,"crypto_box_secretkeybytes","","",null,null],[5,"crypto_box_beforenmbytes","","",null,null],[5,"crypto_box_noncebytes","","",null,null],[5,"crypto_box_zerobytes","","",null,null],[5,"crypto_box_boxzerobytes","","",null,null],[5,"crypto_box_macbytes","","",null,null],[5,"crypto_box_primitive","","",null,null],[5,"crypto_box_seed_keypair","","",null,null],[5,"crypto_box_keypair","","",null,null],[5,"crypto_box_beforenm","","",null,null],[5,"crypto_box_afternm","","",null,null],[5,"crypto_box_open_afternm","","",null,null],[5,"crypto_box","","",null,null],[5,"crypto_box_open","","",null,null],[5,"crypto_box_easy","","",null,null],[5,"crypto_box_open_easy","","",null,null],[5,"crypto_box_detached","","",null,null],[5,"crypto_box_open_detached","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_keypair","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_seedbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_publickeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_secretkeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenmbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_core_hsalsa20_outputbytes","","",null,null],[5,"crypto_core_hsalsa20_inputbytes","","",null,null],[5,"crypto_core_hsalsa20_keybytes","","",null,null],[5,"crypto_core_hsalsa20_constbytes","","",null,null],[5,"crypto_core_hsalsa20","","",null,null],[5,"crypto_hash_bytes","","",null,null],[5,"crypto_hash","","",null,null],[5,"crypto_hash_primitive","","",null,null],[5,"crypto_hash_sha256_bytes","","",null,null],[5,"crypto_hash_sha256","","",null,null],[5,"crypto_hash_sha256_init","","",null,null],[5,"crypto_hash_sha256_update","","",null,null],[5,"crypto_hash_sha256_final","","",null,null],[5,"crypto_hash_sha512_bytes","","",null,null],[5,"crypto_hash_sha512","","",null,null],[5,"crypto_hash_sha512_init","","",null,null],[5,"crypto_hash_sha512_update","","",null,null],[5,"crypto_hash_sha512_final","","",null,null],[5,"crypto_onetimeauth_bytes","","",null,null],[5,"crypto_onetimeauth_keybytes","","",null,null],[5,"crypto_onetimeauth_primitive","","",null,null],[5,"crypto_onetimeauth_poly1305","","",null,null],[5,"crypto_onetimeauth_poly1305_verify","","",null,null],[5,"crypto_onetimeauth_poly1305_bytes","","",null,null],[5,"crypto_onetimeauth_poly1305_keybytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_saltbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strprefix","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str_verify","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_ll","","",null,null],[5,"crypto_scalarmult_curve25519","","",null,null],[5,"crypto_scalarmult_curve25519_base","","",null,null],[5,"crypto_scalarmult_curve25519_bytes","","",null,null],[5,"crypto_scalarmult_curve25519_scalarbytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_open","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_keybytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_shorthash_siphash24","","",null,null],[5,"crypto_shorthash_siphash24_bytes","","",null,null],[5,"crypto_shorthash_siphash24_keybytes","","",null,null],[5,"crypto_sign_ed25519_keypair","","",null,null],[5,"crypto_sign_ed25519_seed_keypair","","",null,null],[5,"crypto_sign_ed25519","","",null,null],[5,"crypto_sign_ed25519_open","","",null,null],[5,"crypto_sign_ed25519_detached","","",null,null],[5,"crypto_sign_ed25519_verify_detached","","",null,null],[5,"crypto_sign_ed25519_bytes","","",null,null],[5,"crypto_sign_ed25519_seedbytes","","",null,null],[5,"crypto_sign_ed25519_publickeybytes","","",null,null],[5,"crypto_sign_ed25519_secretkeybytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_keypair","","",null,null],[5,"crypto_sign_edwards25519sha512batch","","",null,null],[5,"crypto_sign_edwards25519sha512batch_open","","",null,null],[5,"crypto_sign_edwards25519sha512batch_bytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_publickeybytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_secretkeybytes","","",null,null],[5,"crypto_stream_keybytes","","",null,null],[5,"crypto_stream_noncebytes","","",null,null],[5,"crypto_stream_primitive","","",null,null],[5,"crypto_stream_aes128ctr","","",null,null],[5,"crypto_stream_aes128ctr_xor","","",null,null],[5,"crypto_stream_aes128ctr_keybytes","","",null,null],[5,"crypto_stream_aes128ctr_noncebytes","","",null,null],[5,"crypto_stream_aes128ctr_beforenmbytes","","",null,null],[5,"crypto_stream_chacha20_keybytes","","",null,null],[5,"crypto_stream_chacha20_noncebytes","","",null,null],[5,"crypto_stream_salsa20","","",null,null],[5,"crypto_stream_salsa20_xor","","",null,null],[5,"crypto_stream_salsa20_keybytes","","",null,null],[5,"crypto_stream_salsa20_noncebytes","","",null,null],[5,"crypto_stream_salsa2012","","",null,null],[5,"crypto_stream_salsa2012_xor","","",null,null],[5,"crypto_stream_salsa2012_keybytes","","",null,null],[5,"crypto_stream_salsa2012_noncebytes","","",null,null],[5,"crypto_stream_salsa208","","",null,null],[5,"crypto_stream_salsa208_xor","","",null,null],[5,"crypto_stream_salsa208_keybytes","","",null,null],[5,"crypto_stream_salsa208_noncebytes","","",null,null],[5,"crypto_stream_xsalsa20","","",null,null],[5,"crypto_stream_xsalsa20_xor","","",null,null],[5,"crypto_stream_xsalsa20_keybytes","","",null,null],[5,"crypto_stream_xsalsa20_noncebytes","","",null,null],[5,"crypto_verify_16","","",null,null],[5,"crypto_verify_32","","",null,null],[5,"randombytes_buf","","",null,null],[5,"sodium_memzero","","",null,null],[6,"crypto_auth_hmacsha512256_state","","",null,null],[17,"crypto_aead_chacha20poly1305_KEYBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NSECBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NPUBBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_ABYTES","","",null,null],[17,"crypto_auth_BYTES","","",null,null],[17,"crypto_auth_KEYBYTES","","",null,null],[17,"crypto_auth_PRIMITIVE","","",null,null],[17,"crypto_auth_hmacsha256_BYTES","","",null,null],[17,"crypto_auth_hmacsha256_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512_BYTES","","",null,null],[17,"crypto_auth_hmacsha512_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512256_BYTES","","",null,null],[17,"crypto_auth_hmacsha512256_KEYBYTES","","",null,null],[17,"crypto_box_SEEDBYTES","","",null,null],[17,"crypto_box_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_SECRETKEYBYTES","","",null,null],[17,"crypto_box_BEFORENMBYTES","","",null,null],[17,"crypto_box_NONCEBYTES","","",null,null],[17,"crypto_box_ZEROBYTES","","",null,null],[17,"crypto_box_BOXZEROBYTES","","",null,null],[17,"crypto_box_MACBYTES","","",null,null],[17,"crypto_box_PRIMITIVE","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_core_hsalsa20_OUTPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_INPUTBYTES","","",null,null],[17,"crypto_core_hsalsa20_KEYBYTES","","",null,null],[17,"crypto_core_hsalsa20_CONSTBYTES","","",null,null],[17,"crypto_hash_BYTES","","",null,null],[17,"crypto_hash_PRIMITIVE","","",null,null],[17,"crypto_hash_sha256_BYTES","","",null,null],[17,"crypto_hash_sha512_BYTES","","",null,null],[17,"crypto_onetimeauth_BYTES","","",null,null],[17,"crypto_onetimeauth_KEYBYTES","","",null,null],[17,"crypto_onetimeauth_PRIMITIVE","","",null,null],[17,"crypto_onetimeauth_poly1305_BYTES","","",null,null],[17,"crypto_onetimeauth_poly1305_KEYBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_SALTBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRPREFIX","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","","",null,null],[17,"crypto_scalarmult_curve25519_BYTES","","",null,null],[17,"crypto_scalarmult_curve25519_SCALARBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_KEYBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_shorthash_siphash24_BYTES","","",null,null],[17,"crypto_shorthash_siphash24_KEYBYTES","","",null,null],[17,"crypto_sign_ed25519_BYTES","","",null,null],[17,"crypto_sign_ed25519_SEEDBYTES","","",null,null],[17,"crypto_sign_ed25519_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_ed25519_SECRETKEYBYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_BYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_SECRETKEYBYTES","","",null,null],[17,"crypto_stream_KEYBYTES","","",null,null],[17,"crypto_stream_NONCEBYTES","","",null,null],[17,"crypto_stream_PRIMITIVE","","",null,null],[17,"crypto_stream_aes128ctr_KEYBYTES","","",null,null],[17,"crypto_stream_aes128ctr_NONCEBYTES","","",null,null],[17,"crypto_stream_aes128ctr_BEFORENMBYTES","","",null,null],[17,"crypto_stream_chacha20_KEYBYTES","","",null,null],[17,"crypto_stream_chacha20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa20_KEYBYTES","","",null,null],[17,"crypto_stream_salsa20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa2012_KEYBYTES","","",null,null],[17,"crypto_stream_salsa2012_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa208_KEYBYTES","","",null,null],[17,"crypto_stream_salsa208_NONCEBYTES","","",null,null],[17,"crypto_stream_xsalsa20_KEYBYTES","","",null,null],[17,"crypto_stream_xsalsa20_NONCEBYTES","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"crypto_auth_hmacsha256_state"}],"output":{"name":"crypto_auth_hmacsha256_state"}}],[11,"clone","","",1,{"inputs":[{"name":"crypto_auth_hmacsha512_state"}],"output":{"name":"crypto_auth_hmacsha512_state"}}],[11,"clone","","",2,{"inputs":[{"name":"crypto_hash_sha256_state"}],"output":{"name":"crypto_hash_sha256_state"}}],[11,"clone","","",3,{"inputs":[{"name":"crypto_hash_sha512_state"}],"output":{"name":"crypto_hash_sha512_state"}}]],"paths":[[3,"crypto_auth_hmacsha256_state"],[3,"crypto_auth_hmacsha512_state"],[3,"crypto_hash_sha256_state"],[3,"crypto_hash_sha512_state"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
initSearch(searchIndex);
